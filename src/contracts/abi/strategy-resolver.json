{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_leverageStrategyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AURA_DepositFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositCancellationNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20_ApprovalFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20_TransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInvest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUnwind",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvestmentsOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownExecuter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UseOverLoadedRedeemFunction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDepositNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroInvestmentNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AURA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BAL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "D2D",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "D2D_USDC_BPT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkAndReturnCalldata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "flag",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalanceAndReturnCalldata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "flag",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "cdata",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvUSD",
      "outputs": [
        {
          "internalType": "contract IcrvUSD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverageStrategy",
      "outputs": [
        {
          "internalType": "contract LeverageStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvestThreshold",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setInvestThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "newThreshold",
          "type": "int256"
        }
      ],
      "name": "setReinvestThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "newThreshold",
          "type": "int256"
        }
      ],
      "name": "setUnwindThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unwindThreshold",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wstETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6080604052670de0b6b3a764000060035567016345785d8a0000600455348015610027575f80fd5b50604051610acc380380610acc833981016040819052610046916100e9565b338061006b57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6100748161009a565b50600180546001600160a01b0319166001600160a01b0392909216919091179055610116565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100f9575f80fd5b81516001600160a01b038116811461010f575f80fd5b9392505050565b6109a9806101235f395ff3fe608060405234801561000f575f80fd5b5060043610610132575f3560e01c806389a30271116100b45780639c7e40a9116100795780639c7e40a91461027e578063ad5c464814610287578063beeadf16146102a2578063c7af71da146102bd578063f2fde38b146102d5578063f6e5807a146102e8575f80fd5b806389a30271146102075780638da5cb5b146102225780638e24dcea1461023257806392c4b61d1461024d5780639bec828814610263575f80fd5b806357beada2116100fa57806357beada2146101b15780635af7282b146101c4578063715018a6146101db57806381296f51146101e3578063842febba146101ec575f80fd5b80631f4a012b1461013657806333d1dbe31461014b5780633829aea31461017b5780634aa07e6414610196578063564acb9614610136575b5f80fd5b610149610144366004610874565b6102f0565b005b60015461015e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015e73c0c293ce456ff0ed870add98a0828dd4d2903dbf81565b61015e737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b6101496101bf366004610874565b6102fd565b6101cd60045481565b604051908152602001610172565b61014961030a565b6101cd60025481565b61015e7343d4a3cd90ddd2f8f4f693170c9c8098163502ad81565b61015e73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b5f546001600160a01b031661015e565b61015e7327c9f71cc31464b906e0006d4fcbc8900f48f15f81565b61025561031d565b60405161017292919061088b565b61015e73f939e0a03fb07f59a73314e73794be0e57ac1b4e81565b6101cd60035481565b61015e73dfcea9088c8a88a76ff74892c1457c17dfeef9c181565b61015e73ba100000625a3754423978a60c9317c58a424e3d81565b6102c5610638565b6040519015158152602001610172565b6101496102e33660046108e0565b6106b9565b6102556106fb565b6102f86107f9565b600255565b6103056107f9565b600355565b6103126107f9565b61031b5f610825565b565b5f60605f60015f9054906101000a90046001600160a01b03166001600160a01b0316638fe205a86040518163ffffffff1660e01b81526004016040805180830381865afa158015610370573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610394919061090d565b50905067ffffffffffffffff811615801590610424575060045460015f9054906101000a90046001600160a01b03166001600160a01b0316630a3df2af6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103fe573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610422919061095c565b135b156104845760405160016024820181905260448201526311deca7960e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600194909350915050565b67ffffffffffffffff8116156104b557604051600160248201525f60448201526311deca7960e01b90606401610447565b60045460015f9054906101000a90046001600160a01b03166001600160a01b0316630a3df2af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610508573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052c919061095c565b1315610566576040805160048152602481019091526020810180516001600160e01b03166312878bfd60e31b179052600193509150509091565b6003546001546040516370a0823160e01b81526001600160a01b039091166004820152737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0906370a0823190602401602060405180830381865afa1580156105c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105e7919061095c565b1115610621576040805160048152602481019091526020810180516001600160e01b03166312878bfd60e31b179052600193509150509091565b505060408051602081019091525f80825292909150565b5f8060015f9054906101000a90046001600160a01b03166001600160a01b0316630a3df2af6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ae919061095c565b600254121592915050565b6106c16107f9565b6001600160a01b0381166106ef57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6106f881610825565b50565b5f60605f60015f9054906101000a90046001600160a01b03166001600160a01b03166301919ac86040518163ffffffff1660e01b81526004016040805180830381865afa15801561074e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610772919061090d565b50905067ffffffffffffffff8116156107b85750506040805160048152602481019091526020810180516001600160e01b031663138314cd60e11b179052600192909150565b6107c0610638565b15610621576040805160048152602481019091526020810180516001600160e01b0316630fed477960e21b179052600193509150509091565b5f546001600160a01b0316331461031b5760405163118cdaa760e01b81523360048201526024016106e6565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60208284031215610884575f80fd5b5035919050565b82151581525f602060408184015283518060408501525f5b818110156108bf578581018301518582016060015282016108a3565b505f606082860101526060601f19601f830116850101925050509392505050565b5f602082840312156108f0575f80fd5b81356001600160a01b0381168114610906575f80fd5b9392505050565b5f806040838503121561091e575f80fd5b825167ffffffffffffffff81168114610935575f80fd5b60208401519092506001600160c01b0381168114610951575f80fd5b809150509250929050565b5f6020828403121561096c575f80fd5b505191905056fea26469706673582212209b019b6c0b940aed30f4cfbd8d838f8ad7b535c1d025112ab87f085b8fad003a64736f6c63430008140033",
    "sourceMap": "919:5728:0:-:0;;;1357:7;1324:40;;1449:4;1415:38;;1540:144;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1594:10;;1269:95:36;;1322:31;;-1:-1:-1;;;1322:31:36;;1350:1;1322:31;;;455:51:59;428:18;;1322:31:36;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1616:16:0::1;:61:::0;;-1:-1:-1;;;;;;1616:61:0::1;-1:-1:-1::0;;;;;1616:61:0;;;::::1;::::0;;;::::1;::::0;;919:5728;;2912:187:36;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:36;;;-1:-1:-1;;;;;;3020:17:36;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:290:59:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:59;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:59:o;309:203::-;919:5728:0;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561000f575f80fd5b5060043610610132575f3560e01c806389a30271116100b45780639c7e40a9116100795780639c7e40a91461027e578063ad5c464814610287578063beeadf16146102a2578063c7af71da146102bd578063f2fde38b146102d5578063f6e5807a146102e8575f80fd5b806389a30271146102075780638da5cb5b146102225780638e24dcea1461023257806392c4b61d1461024d5780639bec828814610263575f80fd5b806357beada2116100fa57806357beada2146101b15780635af7282b146101c4578063715018a6146101db57806381296f51146101e3578063842febba146101ec575f80fd5b80631f4a012b1461013657806333d1dbe31461014b5780633829aea31461017b5780634aa07e6414610196578063564acb9614610136575b5f80fd5b610149610144366004610874565b6102f0565b005b60015461015e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015e73c0c293ce456ff0ed870add98a0828dd4d2903dbf81565b61015e737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b6101496101bf366004610874565b6102fd565b6101cd60045481565b604051908152602001610172565b61014961030a565b6101cd60025481565b61015e7343d4a3cd90ddd2f8f4f693170c9c8098163502ad81565b61015e73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b5f546001600160a01b031661015e565b61015e7327c9f71cc31464b906e0006d4fcbc8900f48f15f81565b61025561031d565b60405161017292919061088b565b61015e73f939e0a03fb07f59a73314e73794be0e57ac1b4e81565b6101cd60035481565b61015e73dfcea9088c8a88a76ff74892c1457c17dfeef9c181565b61015e73ba100000625a3754423978a60c9317c58a424e3d81565b6102c5610638565b6040519015158152602001610172565b6101496102e33660046108e0565b6106b9565b6102556106fb565b6102f86107f9565b600255565b6103056107f9565b600355565b6103126107f9565b61031b5f610825565b565b5f60605f60015f9054906101000a90046001600160a01b03166001600160a01b0316638fe205a86040518163ffffffff1660e01b81526004016040805180830381865afa158015610370573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610394919061090d565b50905067ffffffffffffffff811615801590610424575060045460015f9054906101000a90046001600160a01b03166001600160a01b0316630a3df2af6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103fe573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610422919061095c565b135b156104845760405160016024820181905260448201526311deca7960e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600194909350915050565b67ffffffffffffffff8116156104b557604051600160248201525f60448201526311deca7960e01b90606401610447565b60045460015f9054906101000a90046001600160a01b03166001600160a01b0316630a3df2af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610508573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052c919061095c565b1315610566576040805160048152602481019091526020810180516001600160e01b03166312878bfd60e31b179052600193509150509091565b6003546001546040516370a0823160e01b81526001600160a01b039091166004820152737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0906370a0823190602401602060405180830381865afa1580156105c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105e7919061095c565b1115610621576040805160048152602481019091526020810180516001600160e01b03166312878bfd60e31b179052600193509150509091565b505060408051602081019091525f80825292909150565b5f8060015f9054906101000a90046001600160a01b03166001600160a01b0316630a3df2af6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ae919061095c565b600254121592915050565b6106c16107f9565b6001600160a01b0381166106ef57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6106f881610825565b50565b5f60605f60015f9054906101000a90046001600160a01b03166001600160a01b03166301919ac86040518163ffffffff1660e01b81526004016040805180830381865afa15801561074e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610772919061090d565b50905067ffffffffffffffff8116156107b85750506040805160048152602481019091526020810180516001600160e01b031663138314cd60e11b179052600192909150565b6107c0610638565b15610621576040805160048152602481019091526020810180516001600160e01b0316630fed477960e21b179052600193509150509091565b5f546001600160a01b0316331461031b5760405163118cdaa760e01b81523360048201526024016106e6565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60208284031215610884575f80fd5b5035919050565b82151581525f602060408184015283518060408501525f5b818110156108bf578581018301518582016060015282016108a3565b505f606082860101526060601f19601f830116850101925050509392505050565b5f602082840312156108f0575f80fd5b81356001600160a01b0381168114610906575f80fd5b9392505050565b5f806040838503121561091e575f80fd5b825167ffffffffffffffff81168114610935575f80fd5b60208401519092506001600160c01b0381168114610951575f80fd5b809150509250929050565b5f6020828403121561096c575f80fd5b505191905056fea26469706673582212209b019b6c0b940aed30f4cfbd8d838f8ad7b535c1d025112ab87f085b8fad003a64736f6c63430008140033",
    "sourceMap": "919:5728:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6062:115;;;;;;:::i;:::-;;:::i;:::-;;1009:40;;;;;-1:-1:-1;;;;;1009:40:0;;;;;;-1:-1:-1;;;;;387:32:59;;;369:51;;357:2;342:18;1009:40:0;;;;;;;;1116:73:13;;1147:42;1116:73;;1377:82;;1416:42;1377:82;;5649:104:0;;;;;;:::i;:::-;;:::i;1415:38::-;;;;;;;;;1192:25:59;;;1180:2;1165:18;1415:38:0;1048:175:59;2293:101:36;;;:::i;1142:29:0:-;;;;;;1656:79:13;;1692:42;1656:79;;1518:80;;1555:42;1518:80;;1638:85:36;1684:7;1710:6;-1:-1:-1;;;;;1710:6:36;1638:85;;1818:88:13;;1863:42;1818:88;;3165:1345:0;;;:::i;:::-;;;;;;;;:::i;1957:84:13:-;;1998:42;1957:84;;1324:40:0;;;;;;1243:73:13;;1274:42;1243:73;;990:72;;1020:42;990:72;;2909:176:0;;;:::i;:::-;;;2431:14:59;;2424:22;2406:41;;2394:2;2379:18;2909:176:0;2266:187:59;2543:215:36;;;;;;:::i;:::-;;:::i;4662:718:0:-;;;:::i;6062:115::-;1531:13:36;:11;:13::i;:::-;6140:15:0::1;:30:::0;6062:115::o;5649:104::-;1531:13:36;:11;:13::i;:::-;5722:15:0::1;:24:::0;5649:104::o;2293:101:36:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;3165:1345:0:-;3227:9;3238:18;3269:17;3291:16;;;;;;;;;-1:-1:-1;;;;;3291:16:0;-1:-1:-1;;;;;3291:29:0;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3268:54:0;-1:-1:-1;3374:15:0;;;;;;;:72;;;3429:17;;3393:16;;;;;;;;;-1:-1:-1;;;;;3393:16:0;-1:-1:-1;;;;;3393:31:0;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;3374:72;3370:508;;;3470:82;;3544:1;3470:82;;;3579:36:59;;;3631:18;;;3624:50;-1:-1:-1;;;3493:49:0;3552:18:59;;3470:82:0;;;;-1:-1:-1;;3470:82:0;;;;;;;;;;;;;;-1:-1:-1;;;;;3470:82:0;-1:-1:-1;;;;;;3470:82:0;;;;;;;;;;3573:4;;3470:82;;-1:-1:-1;3165:1345:0;-1:-1:-1;;3165:1345:0:o;3370:508::-;3686:15;;;;3682:196;;3725:83;;3799:1;3725:83;;;3579:36:59;3802:5:0;3631:18:59;;;3624:50;-1:-1:-1;;;3748:49:0;3552:18:59;;3725:83:0;3405:275:59;3682:196:0;4011:17;;3975:16;;;;;;;;;-1:-1:-1;;;;;3975:16:0;-1:-1:-1;;;;;3975:31:0;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;3971:503;;;4052:66;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4052:66:0;-1:-1:-1;;;4052:66:0;;;4139:4;;-1:-1:-1;4052:66:0;-1:-1:-1;4483:20:0;3165:1345;;:::o;3971:503::-;4210:15;;4189:16;;4164:43;;-1:-1:-1;;;4164:43:0;;-1:-1:-1;;;;;4189:16:0;;;4164:43;;;369:51:59;1416:42:13;;4164:16:0;;342:18:59;;4164:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:61;4160:314;;;4298:66;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4298:66:0;-1:-1:-1;;;4298:66:0;;;4385:4;;-1:-1:-1;4298:66:0;-1:-1:-1;4483:20:0;3165:1345;;:::o;4160:314::-;-1:-1:-1;;4428:9:0;;;;;;;;;-1:-1:-1;4428:9:0;;;-1:-1:-1;4428:9:0;;-1:-1:-1;3165:1345:0:o;2909:176::-;2956:4;2972:20;2995:16;;;;;;;;;-1:-1:-1;;;;;2995:16:0;-1:-1:-1;;;;;2995:31:0;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3063:15;;-1:-1:-1;3046:32:0;;2909:176;-1:-1:-1;;2909:176:0:o;2543:215:36:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:36;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:36;;2700:1:::1;2672:31;::::0;::::1;369:51:59::0;342:18;;2672:31:36::1;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;4662:718:0:-;4717:9;4728:18;4813:17;4835:16;;;;;;;;;-1:-1:-1;;;;;4835:16:0;-1:-1:-1;;;;;4835:29:0;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4812:54:0;-1:-1:-1;4880:15:0;;;;4876:161;;-1:-1:-1;;4919:73:0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4919:73:0;-1:-1:-1;;;4919:73:0;;;5014:4;;4919:73;;-1:-1:-1;4662:718:0:o;4876:161::-;5120:16;:14;:16::i;:::-;5116:228;;;5160:74;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5160:74:0;-1:-1:-1;;;5160:74:0;;;5255:4;;-1:-1:-1;5160:74:0;-1:-1:-1;4483:20:0;3165:1345;;:::o;1796:162:36:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:36;735:10:46;1855:23:36;1851:101;;1901:40;;-1:-1:-1;;;1901:40:36;;735:10:46;1901:40:36;;;369:51:59;342:18;;1901:40:36;198:228:59;2912:187:36;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:36;;;-1:-1:-1;;;;;;3020:17:36;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:179:59:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;-1:-1:-1;164:23:59;;14:179;-1:-1:-1;14:179:59:o;1228:627::-;1411:6;1404:14;1397:22;1386:9;1379:41;1360:4;1439:2;1477;1472;1461:9;1457:18;1450:30;1509:6;1503:13;1552:6;1547:2;1536:9;1532:18;1525:34;1577:1;1587:140;1601:6;1598:1;1595:13;1587:140;;;1696:14;;;1692:23;;1686:30;1662:17;;;1681:2;1658:26;1651:66;1616:10;;1587:140;;;1591:3;1776:1;1771:2;1762:6;1751:9;1747:22;1743:31;1736:42;1846:2;1839;1835:7;1830:2;1822:6;1818:15;1814:29;1803:9;1799:45;1795:54;1787:62;;;;1228:627;;;;;:::o;2458:286::-;2517:6;2570:2;2558:9;2549:7;2545:23;2541:32;2538:52;;;2586:1;2583;2576:12;2538:52;2612:23;;-1:-1:-1;;;;;2664:31:59;;2654:42;;2644:70;;2710:1;2707;2700:12;2644:70;2733:5;2458:286;-1:-1:-1;;;2458:286:59:o;2749:463::-;2827:6;2835;2888:2;2876:9;2867:7;2863:23;2859:32;2856:52;;;2904:1;2901;2894:12;2856:52;2936:9;2930:16;2986:18;2979:5;2975:30;2968:5;2965:41;2955:69;;3020:1;3017;3010:12;2955:69;3093:2;3078:18;;3072:25;3043:5;;-1:-1:-1;;;;;;3128:33:59;;3116:46;;3106:74;;3176:1;3173;3166:12;3106:74;3199:7;3189:17;;;2749:463;;;;;:::o;3217:183::-;3286:6;3339:2;3327:9;3318:7;3314:23;3310:32;3307:52;;;3355:1;3352;3345:12;3307:52;-1:-1:-1;3378:16:59;;3217:183;-1:-1:-1;3217:183:59:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "AURA()": "3829aea3",
    "BAL()": "beeadf16",
    "D2D()": "842febba",
    "D2D_USDC_BPT()": "8e24dcea",
    "USDC()": "89a30271",
    "WETH()": "ad5c4648",
    "checkAndReturnCalldata()": "f6e5807a",
    "checkBalanceAndReturnCalldata()": "92c4b61d",
    "checkCondition()": "c7af71da",
    "crvUSD()": "9bec8288",
    "investThreshold()": "9c7e40a9",
    "leverageStrategy()": "33d1dbe3",
    "owner()": "8da5cb5b",
    "reinvestThreshold()": "5af7282b",
    "renounceOwnership()": "715018a6",
    "setInvestThreshold(uint256)": "57beada2",
    "setReinvestThreshold(int256)": "564acb96",
    "setUnwindThreshold(int256)": "1f4a012b",
    "transferOwnership(address)": "f2fde38b",
    "unwindThreshold()": "81296f51",
    "wstETH()": "4aa07e64"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_leverageStrategyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AURA_DepositFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositCancellationNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20_ApprovalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20_TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInvest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnwind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvestmentsOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownExecuter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UseOverLoadedRedeemFunction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDepositNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroInvestmentNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AURA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"D2D\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"D2D_USDC_BPT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAndReturnCalldata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalanceAndReturnCalldata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"cdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvUSD\",\"outputs\":[{\"internalType\":\"contract IcrvUSD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageStrategy\",\"outputs\":[{\"internalType\":\"contract LeverageStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestThreshold\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInvestThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"newThreshold\",\"type\":\"int256\"}],\"name\":\"setReinvestThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"newThreshold\",\"type\":\"int256\"}],\"name\":\"setUnwindThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwindThreshold\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows the PowerPool to check and receive the appropriate calldata for automated function calls\",\"errors\":{\"AURA_DepositFailed()\":[{\"details\":\"Raised when ERC20 token transfer fails.\"}],\"DepositCancellationNotAllowed()\":[{\"details\":\"Raised when cancellation of a deposit is not allowed.\"}],\"ERC20_TransferFailed()\":[{\"details\":\"Raised when ERC20 token transfer fails.\"}],\"ERC20_TransferFromFailed()\":[{\"details\":\"Raised when ERC20 token transferFrom fails.\"}],\"InvalidFee()\":[{\"details\":\"Raised when the fee percentage is larger than 70%\"}],\"InvalidInput()\":[{\"details\":\"Raised when the percentage is larger than 100%\"}],\"InvestmentsOverflow()\":[{\"details\":\"Raised when the amount of investments > maxInvestments amount\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UnknownExecuter()\":[{\"details\":\"Raised when an unknown executer attempts an action.\"}],\"UseOverLoadedRedeemFunction()\":[{\"details\":\"Raised when an overloaded redeem function is incorrectly used.\"}],\"ZeroDepositNotAllowed()\":[{\"details\":\"Raised when a zero deposit is attempted.\"}],\"ZeroInvestmentNotAllowed()\":[{\"details\":\"Raised when a zero investment is attempted.\"}]},\"kind\":\"dev\",\"methods\":{\"checkAndReturnCalldata()\":{\"details\":\"Only to be used by Keeper to obtain correct calldata\"},\"checkCondition()\":{\"returns\":{\"_0\":\"Returns a `bool` indicating whether the PowerPool should unwind or not\"}},\"constructor\":{\"params\":{\"_leverageStrategyAddress\":\"Address of the target Strategy contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setInvestThreshold(uint256)\":{\"details\":\"Access controlled\",\"params\":{\"amount\":\"Amount of wstETH that should accrue in Strategy before it will be invested automatically\"}},\"setReinvestThreshold(int256)\":{\"details\":\"Access controlledBe careful! This can be negative, although is not recommended to be.\",\"params\":{\"newThreshold\":\"Amount of wstETH that should accrue in Strategy before it will be invested automatically\"}},\"setUnwindThreshold(int256)\":{\"details\":\"Access controlledBe careful! This can be negative.\",\"params\":{\"newThreshold\":\"Amount of wstETH that should accrue in Strategy before it will be invested automatically\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"StrategyResolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"AURA()\":{\"notice\":\"The address of the AURA token.\"},\"BAL()\":{\"notice\":\"The address of the BAL token.\"},\"D2D()\":{\"notice\":\"The ERC20 interface for D2D token.\"},\"D2D_USDC_BPT()\":{\"notice\":\"The ERC20 interface for D2D/USDC Balancer Pool Token (BPT).\"},\"USDC()\":{\"notice\":\"The ERC20 interface for USDC token.\"},\"WETH()\":{\"notice\":\"The address of the WETH token.\"},\"checkAndReturnCalldata()\":{\"notice\":\"This function returns the calldata for the Keeper to execute\"},\"checkBalanceAndReturnCalldata()\":{\"notice\":\"Used by Keeper to check if there is any balance to invest\"},\"checkCondition()\":{\"notice\":\"Check used by the Power Pool to determine when to rebalance the strategy\"},\"crvUSD()\":{\"notice\":\"The crvUSD token interface.\"},\"setInvestThreshold(uint256)\":{\"notice\":\"Allows owner to set the amount of wstETH that should be in the contract before the keeper invests it\"},\"setReinvestThreshold(int256)\":{\"notice\":\"Allows owner to set the acceptable `health` threshold before the keeper increases the debt\"},\"setUnwindThreshold(int256)\":{\"notice\":\"Allows owner to set the acceptable `health` threshold before the keeper unwinds debt\"},\"wstETH()\":{\"notice\":\"The ERC20 interface for wstETH token.\"}},\"notice\":\"Used by PowerPool to check and manage protocol health\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HFUnwindResolver.sol\":\"StrategyResolver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":python3.11/=lib/python3.11/\"]},\"sources\":{\"contracts/HFUnwindResolver.sol\":{\"keccak256\":\"0x46a71bfc91ff361b6791ef26d4e9aedcba8e90859ce2ab6e7c1f20dbd91fe507\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d6b6c809ba6668bc5334851241be4e7b0d10b4e7c4869bbcaa02e7a31a852ba9\",\"dweb:/ipfs/QmTtAceuYKBD51mMW35bzXGyqxMGurNzFCRtThQCGy4Vb1\"]},\"contracts/LeverageStrategy.sol\":{\"keccak256\":\"0x2e09b5c31e0b448b8dbeb00bf3c9f2361e8d41e68688beae75693f9362752be8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://eb9d2b4ff4de292df5a9a26fcdf7d578d405d66a8be1f664bea96592b73e91f6\",\"dweb:/ipfs/QmPWoSkTHPPdwQUzPoKyfUMf9cbxy47GwcqnFAcKrd4mae\"]},\"contracts/LeverageStrategyStorage.sol\":{\"keccak256\":\"0xf233047681c229731f601558f59e573e73722a89ae420bdf25297602f193570f\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://888d14f440702c57201e872bc95d68cd016cef6149572c7b8c6b34e6c821b3ed\",\"dweb:/ipfs/QmNRhsDgFGUbyGJQaecJ8ibYeV4KToeNk2btdKJbFmyVSx\"]},\"contracts/interfaces/IAsset.sol\":{\"keccak256\":\"0xc49f2c641bd33e4289ddc38f94c062ef3f78c82fa17f5a115b21ede8a18e75ca\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://57f09238ae80af222c023c9a4bec4d17351707397f15029b3076e90700ee9996\",\"dweb:/ipfs/QmYkaBCk3S1V2AL5nArygRBY1wT4cn7Ctacar86rTWaqmk\"]},\"contracts/interfaces/IAuraBooster.sol\":{\"keccak256\":\"0xac51f1ef4a8cd9d0087017c9af35532ae41ce2bc9d3d7bb4e378c2a93f66ef4e\",\"urls\":[\"bzz-raw://a3fab5d235b263191f63191b9d9484152270a8cf4d8a0556296d189190b0ef6d\",\"dweb:/ipfs/QmTJtgVfhUU65Qpt4ngC962zftH8T4EeikLEk1CFx5bg1z\"]},\"contracts/interfaces/IBalancerVault.sol\":{\"keccak256\":\"0xdea3f4b89606440653f8322574e871fc8d7fd52bea14e6c9e968ad63bf91fbd2\",\"urls\":[\"bzz-raw://c710dc27daf2fb550fe39589b5fcc2e1afb589de977626e30f822c7c30683b79\",\"dweb:/ipfs/QmTuDEyHobJgQJ88kDbWw5NC3GdRWFsap9cJuo9riV7hQv\"]},\"contracts/interfaces/IBasicRewards.sol\":{\"keccak256\":\"0xa5090c069c25b0a11fb33a90d5085b267b6e24b161e089013da9ba5927cef6c5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f860ac7833cadd8639aa5a0633f746358562e7ac0f8af1e204dce48fab49a809\",\"dweb:/ipfs/QmY2i8SAKNedXCKV4SQ8NxQrx3peA8DyLC9bcXydKaADDw\"]},\"contracts/interfaces/IPool.sol\":{\"keccak256\":\"0xa5e684fbed8d7d948493a91ca74c1a756b77f86ea17d55d1ae47cffb8a838cb3\",\"urls\":[\"bzz-raw://a31d46546d488ec6c6845d26fd8aa6f52e2901908414d844d93899edfc16dda9\",\"dweb:/ipfs/QmQvucahN1rymftdabYc7NoFk4gxuaxYL5J1QVXayB4JVa\"]},\"contracts/interfaces/IcrvUSD.sol\":{\"keccak256\":\"0x42141fe896a4877f5e09f6e7c636b468f59a0be38f01b1ca4892b3493c745d52\",\"urls\":[\"bzz-raw://5595828c358c77e6c4120a61ce86e066beb6e48f205b82e92cd4bf96885728ec\",\"dweb:/ipfs/Qmcy4rbKZjnD6fpwvJFtrezjvfCSp3SzdX2Cps6QSeZd9b\"]},\"contracts/interfaces/IcrvUSDController.sol\":{\"keccak256\":\"0x19a6fa0392e8f355d70bc25c0892c080b1adcead16d225f4ce3a5d82b0513693\",\"urls\":[\"bzz-raw://5bcd12ec0b351e797b27f08e2dc3cd384e1e9c7e4ef88411c6d3c7402428bd99\",\"dweb:/ipfs/QmY5xWMmfSZkX56aFkXJiNuj88ZuQnst3oJkfNKQwEpjAH\"]},\"contracts/interfaces/IcrvUSDUSDCPool.sol\":{\"keccak256\":\"0xcac25ec47565b3752847fea11cbf817fa521495be4534e2dc063a8dd0faa052c\",\"urls\":[\"bzz-raw://c1e0aeb6f5e8dc085728b0e62e19fff3aa779aa8acc8c729c278fc5874978b7e\",\"dweb:/ipfs/QmWhZ39cWuWzsKiCBrmwr9tufGULNK1CLt6fh8ZFGgU3Zi\"]},\"contracts/periphery/AuraUtils.sol\":{\"keccak256\":\"0xb2f881fe585861854863482fc61675903439e573d6f74cd016750fd6db9cc04a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://09333aec3bf8edbed8cbba06824f67f3b25ca7bb5d3f8f14cc1f9477cb45c1e8\",\"dweb:/ipfs/QmfHsQL6czNxJYEqUd9b1hMcK69s7bPw8r8vGiS2sZ6vx9\"]},\"contracts/periphery/BalancerUtils.sol\":{\"keccak256\":\"0x89af5e9fd2f1a605c312d425ce058c5738ea9cc8cd0f8f5244c4b2b5791dddf8\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6e99e215b74b9731241b6231dcd523821235538f47a87fea1526c2dbd442e690\",\"dweb:/ipfs/QmPuyMsyHJAGWQJUbz4DFpcNYsfX6hyWL8qpCadCLhGAHf\"]},\"contracts/periphery/Constants.sol\":{\"keccak256\":\"0x898f376683e128d072b5a6d8dc1356ba7891b212ea7964b0b8a969d658e35b9c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://65326acc9e3dbaa54075940362144cf70630d25df853efdf7d78b8d3967fcb8e\",\"dweb:/ipfs/QmNVvz6uLiJbM8v4reAwQC8Maxt9mJbKAB4jJer3GJNqtk\"]},\"contracts/periphery/CurveUtils.sol\":{\"keccak256\":\"0x9b5ed3911774dd5a335d0d381e8a46fe4e2364ca709d143aa6cb0f014f804719\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c406266d675806658aed6f87a4dade2ecdb2a30d0ad0bdb79af12ccc0d810082\",\"dweb:/ipfs/QmPtTbW8oL1dzRSejuzdqdquftaKzZC7G8YG6tkcboDVjG\"]},\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80\",\"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z\"]},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26\",\"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.20+commit.a1b79de6"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_leverageStrategyAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AURA_DepositFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DepositCancellationNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC20_ApprovalFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC20_TransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC20_TransferFromFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidFee"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidInput"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidInvest"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidUnwind"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvestmentsOverflow"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OwnableInvalidOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OwnableUnauthorizedAccount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnknownExecuter"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UseOverLoadedRedeemFunction"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroDepositNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroInvestmentNotAllowed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "AURA",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BAL",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "D2D",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "D2D_USDC_BPT",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "USDC",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "WETH",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "checkAndReturnCalldata",
          "outputs": [
            {
              "internalType": "bool",
              "name": "flag",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "cdata",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "checkBalanceAndReturnCalldata",
          "outputs": [
            {
              "internalType": "bool",
              "name": "flag",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "cdata",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "checkCondition",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "crvUSD",
          "outputs": [
            {
              "internalType": "contract IcrvUSD",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "investThreshold",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "leverageStrategy",
          "outputs": [
            {
              "internalType": "contract LeverageStrategy",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "reinvestThreshold",
          "outputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setInvestThreshold"
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "newThreshold",
              "type": "int256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setReinvestThreshold"
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "newThreshold",
              "type": "int256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUnwindThreshold"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "unwindThreshold",
          "outputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "wstETH",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "checkAndReturnCalldata()": {
            "details": "Only to be used by Keeper to obtain correct calldata"
          },
          "checkCondition()": {
            "returns": {
              "_0": "Returns a `bool` indicating whether the PowerPool should unwind or not"
            }
          },
          "constructor": {
            "params": {
              "_leverageStrategyAddress": "Address of the target Strategy contract"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "setInvestThreshold(uint256)": {
            "details": "Access controlled",
            "params": {
              "amount": "Amount of wstETH that should accrue in Strategy before it will be invested automatically"
            }
          },
          "setReinvestThreshold(int256)": {
            "details": "Access controlledBe careful! This can be negative, although is not recommended to be.",
            "params": {
              "newThreshold": "Amount of wstETH that should accrue in Strategy before it will be invested automatically"
            }
          },
          "setUnwindThreshold(int256)": {
            "details": "Access controlledBe careful! This can be negative.",
            "params": {
              "newThreshold": "Amount of wstETH that should accrue in Strategy before it will be invested automatically"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "AURA()": {
            "notice": "The address of the AURA token."
          },
          "BAL()": {
            "notice": "The address of the BAL token."
          },
          "D2D()": {
            "notice": "The ERC20 interface for D2D token."
          },
          "D2D_USDC_BPT()": {
            "notice": "The ERC20 interface for D2D/USDC Balancer Pool Token (BPT)."
          },
          "USDC()": {
            "notice": "The ERC20 interface for USDC token."
          },
          "WETH()": {
            "notice": "The address of the WETH token."
          },
          "checkAndReturnCalldata()": {
            "notice": "This function returns the calldata for the Keeper to execute"
          },
          "checkBalanceAndReturnCalldata()": {
            "notice": "Used by Keeper to check if there is any balance to invest"
          },
          "checkCondition()": {
            "notice": "Check used by the Power Pool to determine when to rebalance the strategy"
          },
          "crvUSD()": {
            "notice": "The crvUSD token interface."
          },
          "setInvestThreshold(uint256)": {
            "notice": "Allows owner to set the amount of wstETH that should be in the contract before the keeper invests it"
          },
          "setReinvestThreshold(int256)": {
            "notice": "Allows owner to set the acceptable `health` threshold before the keeper increases the debt"
          },
          "setUnwindThreshold(int256)": {
            "notice": "Allows owner to set the acceptable `health` threshold before the keeper unwinds debt"
          },
          "wstETH()": {
            "notice": "The ERC20 interface for wstETH token."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "python3.11/=lib/python3.11/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/HFUnwindResolver.sol": "StrategyResolver"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/HFUnwindResolver.sol": {
        "keccak256": "0x46a71bfc91ff361b6791ef26d4e9aedcba8e90859ce2ab6e7c1f20dbd91fe507",
        "urls": [
          "bzz-raw://d6b6c809ba6668bc5334851241be4e7b0d10b4e7c4869bbcaa02e7a31a852ba9",
          "dweb:/ipfs/QmTtAceuYKBD51mMW35bzXGyqxMGurNzFCRtThQCGy4Vb1"
        ],
        "license": "GPL-3.0-or-later"
      },
      "contracts/LeverageStrategy.sol": {
        "keccak256": "0x2e09b5c31e0b448b8dbeb00bf3c9f2361e8d41e68688beae75693f9362752be8",
        "urls": [
          "bzz-raw://eb9d2b4ff4de292df5a9a26fcdf7d578d405d66a8be1f664bea96592b73e91f6",
          "dweb:/ipfs/QmPWoSkTHPPdwQUzPoKyfUMf9cbxy47GwcqnFAcKrd4mae"
        ],
        "license": "GPL-3.0-or-later"
      },
      "contracts/LeverageStrategyStorage.sol": {
        "keccak256": "0xf233047681c229731f601558f59e573e73722a89ae420bdf25297602f193570f",
        "urls": [
          "bzz-raw://888d14f440702c57201e872bc95d68cd016cef6149572c7b8c6b34e6c821b3ed",
          "dweb:/ipfs/QmNRhsDgFGUbyGJQaecJ8ibYeV4KToeNk2btdKJbFmyVSx"
        ],
        "license": "GPL-3.0-or-later"
      },
      "contracts/interfaces/IAsset.sol": {
        "keccak256": "0xc49f2c641bd33e4289ddc38f94c062ef3f78c82fa17f5a115b21ede8a18e75ca",
        "urls": [
          "bzz-raw://57f09238ae80af222c023c9a4bec4d17351707397f15029b3076e90700ee9996",
          "dweb:/ipfs/QmYkaBCk3S1V2AL5nArygRBY1wT4cn7Ctacar86rTWaqmk"
        ],
        "license": "GPL-3.0-or-later"
      },
      "contracts/interfaces/IAuraBooster.sol": {
        "keccak256": "0xac51f1ef4a8cd9d0087017c9af35532ae41ce2bc9d3d7bb4e378c2a93f66ef4e",
        "urls": [
          "bzz-raw://a3fab5d235b263191f63191b9d9484152270a8cf4d8a0556296d189190b0ef6d",
          "dweb:/ipfs/QmTJtgVfhUU65Qpt4ngC962zftH8T4EeikLEk1CFx5bg1z"
        ],
        "license": null
      },
      "contracts/interfaces/IBalancerVault.sol": {
        "keccak256": "0xdea3f4b89606440653f8322574e871fc8d7fd52bea14e6c9e968ad63bf91fbd2",
        "urls": [
          "bzz-raw://c710dc27daf2fb550fe39589b5fcc2e1afb589de977626e30f822c7c30683b79",
          "dweb:/ipfs/QmTuDEyHobJgQJ88kDbWw5NC3GdRWFsap9cJuo9riV7hQv"
        ],
        "license": null
      },
      "contracts/interfaces/IBasicRewards.sol": {
        "keccak256": "0xa5090c069c25b0a11fb33a90d5085b267b6e24b161e089013da9ba5927cef6c5",
        "urls": [
          "bzz-raw://f860ac7833cadd8639aa5a0633f746358562e7ac0f8af1e204dce48fab49a809",
          "dweb:/ipfs/QmY2i8SAKNedXCKV4SQ8NxQrx3peA8DyLC9bcXydKaADDw"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IPool.sol": {
        "keccak256": "0xa5e684fbed8d7d948493a91ca74c1a756b77f86ea17d55d1ae47cffb8a838cb3",
        "urls": [
          "bzz-raw://a31d46546d488ec6c6845d26fd8aa6f52e2901908414d844d93899edfc16dda9",
          "dweb:/ipfs/QmQvucahN1rymftdabYc7NoFk4gxuaxYL5J1QVXayB4JVa"
        ],
        "license": null
      },
      "contracts/interfaces/IcrvUSD.sol": {
        "keccak256": "0x42141fe896a4877f5e09f6e7c636b468f59a0be38f01b1ca4892b3493c745d52",
        "urls": [
          "bzz-raw://5595828c358c77e6c4120a61ce86e066beb6e48f205b82e92cd4bf96885728ec",
          "dweb:/ipfs/Qmcy4rbKZjnD6fpwvJFtrezjvfCSp3SzdX2Cps6QSeZd9b"
        ],
        "license": null
      },
      "contracts/interfaces/IcrvUSDController.sol": {
        "keccak256": "0x19a6fa0392e8f355d70bc25c0892c080b1adcead16d225f4ce3a5d82b0513693",
        "urls": [
          "bzz-raw://5bcd12ec0b351e797b27f08e2dc3cd384e1e9c7e4ef88411c6d3c7402428bd99",
          "dweb:/ipfs/QmY5xWMmfSZkX56aFkXJiNuj88ZuQnst3oJkfNKQwEpjAH"
        ],
        "license": null
      },
      "contracts/interfaces/IcrvUSDUSDCPool.sol": {
        "keccak256": "0xcac25ec47565b3752847fea11cbf817fa521495be4534e2dc063a8dd0faa052c",
        "urls": [
          "bzz-raw://c1e0aeb6f5e8dc085728b0e62e19fff3aa779aa8acc8c729c278fc5874978b7e",
          "dweb:/ipfs/QmWhZ39cWuWzsKiCBrmwr9tufGULNK1CLt6fh8ZFGgU3Zi"
        ],
        "license": null
      },
      "contracts/periphery/AuraUtils.sol": {
        "keccak256": "0xb2f881fe585861854863482fc61675903439e573d6f74cd016750fd6db9cc04a",
        "urls": [
          "bzz-raw://09333aec3bf8edbed8cbba06824f67f3b25ca7bb5d3f8f14cc1f9477cb45c1e8",
          "dweb:/ipfs/QmfHsQL6czNxJYEqUd9b1hMcK69s7bPw8r8vGiS2sZ6vx9"
        ],
        "license": "GPL-3.0-or-later"
      },
      "contracts/periphery/BalancerUtils.sol": {
        "keccak256": "0x89af5e9fd2f1a605c312d425ce058c5738ea9cc8cd0f8f5244c4b2b5791dddf8",
        "urls": [
          "bzz-raw://6e99e215b74b9731241b6231dcd523821235538f47a87fea1526c2dbd442e690",
          "dweb:/ipfs/QmPuyMsyHJAGWQJUbz4DFpcNYsfX6hyWL8qpCadCLhGAHf"
        ],
        "license": "GPL-3.0-or-later"
      },
      "contracts/periphery/Constants.sol": {
        "keccak256": "0x898f376683e128d072b5a6d8dc1356ba7891b212ea7964b0b8a969d658e35b9c",
        "urls": [
          "bzz-raw://65326acc9e3dbaa54075940362144cf70630d25df853efdf7d78b8d3967fcb8e",
          "dweb:/ipfs/QmNVvz6uLiJbM8v4reAwQC8Maxt9mJbKAB4jJer3GJNqtk"
        ],
        "license": "GPL-3.0-or-later"
      },
      "contracts/periphery/CurveUtils.sol": {
        "keccak256": "0x9b5ed3911774dd5a335d0d381e8a46fe4e2364ca709d143aa6cb0f014f804719",
        "urls": [
          "bzz-raw://c406266d675806658aed6f87a4dade2ecdb2a30d0ad0bdb79af12ccc0d810082",
          "dweb:/ipfs/QmPtTbW8oL1dzRSejuzdqdquftaKzZC7G8YG6tkcboDVjG"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
        "urls": [
          "bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
          "dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
        "urls": [
          "bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
          "dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
        "urls": [
          "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
          "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol": {
        "keccak256": "0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d",
        "urls": [
          "bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205",
          "dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
        "keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
        "urls": [
          "bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
          "dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80",
        "urls": [
          "bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229",
          "dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
        "urls": [
          "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
          "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol": {
        "keccak256": "0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d",
        "urls": [
          "bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f",
          "dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
        "urls": [
          "bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
          "dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
        "urls": [
          "bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
          "dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
        "urls": [
          "bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
          "dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
        "urls": [
          "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
          "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3",
        "urls": [
          "bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867",
          "dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
        "keccak256": "0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236",
        "urls": [
          "bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02",
          "dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
        "urls": [
          "bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
          "dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
        "urls": [
          "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
          "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
        "urls": [
          "bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
          "dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/HFUnwindResolver.sol",
    "id": 294,
    "exportedSymbols": {
      "BalancerUtils": [
        3648
      ],
      "Constants": [
        3741
      ],
      "LeverageStrategy": [
        2000
      ],
      "Ownable": [
        47902
      ],
      "StrategyResolver": [
        293
      ]
    },
    "nodeType": "SourceUnit",
    "src": "497:6151:0",
    "nodes": [
      {
        "id": 1,
        "nodeType": "PragmaDirective",
        "src": "497:23:0",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".20"
        ]
      },
      {
        "id": 4,
        "nodeType": "ImportDirective",
        "src": "522:71:0",
        "nodes": [],
        "absolutePath": "contracts/LeverageStrategy.sol",
        "file": "./LeverageStrategy.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 294,
        "sourceUnit": 2001,
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "LeverageStrategy",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2000,
              "src": "530:16:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3,
              "name": "BalancerUtils",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3648,
              "src": "548:13:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 6,
        "nodeType": "ImportDirective",
        "src": "594:52:0",
        "nodes": [],
        "absolutePath": "contracts/periphery/Constants.sol",
        "file": "./periphery/Constants.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 294,
        "sourceUnit": 3742,
        "symbolAliases": [
          {
            "foreign": {
              "id": 5,
              "name": "Constants",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3741,
              "src": "602:9:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 8,
        "nodeType": "ImportDirective",
        "src": "647:67:0",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 294,
        "sourceUnit": 47903,
        "symbolAliases": [
          {
            "foreign": {
              "id": 7,
              "name": "Ownable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 47902,
              "src": "655:7:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 293,
        "nodeType": "ContractDefinition",
        "src": "919:5728:0",
        "nodes": [
          {
            "id": 16,
            "nodeType": "VariableDeclaration",
            "src": "1009:40:0",
            "nodes": [],
            "constant": false,
            "functionSelector": "33d1dbe3",
            "mutability": "mutable",
            "name": "leverageStrategy",
            "nameLocation": "1033:16:0",
            "scope": 293,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
              "typeString": "contract LeverageStrategy"
            },
            "typeName": {
              "id": 15,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 14,
                "name": "LeverageStrategy",
                "nameLocations": [
                  "1009:16:0"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 2000,
                "src": "1009:16:0"
              },
              "referencedDeclaration": 2000,
              "src": "1009:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                "typeString": "contract LeverageStrategy"
              }
            },
            "visibility": "public"
          },
          {
            "id": 18,
            "nodeType": "VariableDeclaration",
            "src": "1142:29:0",
            "nodes": [],
            "constant": false,
            "functionSelector": "81296f51",
            "mutability": "mutable",
            "name": "unwindThreshold",
            "nameLocation": "1156:15:0",
            "scope": 293,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_int256",
              "typeString": "int256"
            },
            "typeName": {
              "id": 17,
              "name": "int256",
              "nodeType": "ElementaryTypeName",
              "src": "1142:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_int256",
                "typeString": "int256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 21,
            "nodeType": "VariableDeclaration",
            "src": "1324:40:0",
            "nodes": [],
            "constant": false,
            "functionSelector": "9c7e40a9",
            "mutability": "mutable",
            "name": "investThreshold",
            "nameLocation": "1339:15:0",
            "scope": 293,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 19,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1324:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 20,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1357:7:0",
              "subdenomination": "ether",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                "typeString": "int_const 1000000000000000000"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "id": 24,
            "nodeType": "VariableDeclaration",
            "src": "1415:38:0",
            "nodes": [],
            "constant": false,
            "functionSelector": "5af7282b",
            "mutability": "mutable",
            "name": "reinvestThreshold",
            "nameLocation": "1429:17:0",
            "scope": 293,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_int256",
              "typeString": "int256"
            },
            "typeName": {
              "id": 22,
              "name": "int256",
              "nodeType": "ElementaryTypeName",
              "src": "1415:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_int256",
                "typeString": "int256"
              }
            },
            "value": {
              "hexValue": "31653137",
              "id": 23,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1449:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_100000000000000000_by_1",
                "typeString": "int_const 100000000000000000"
              },
              "value": "1e17"
            },
            "visibility": "public"
          },
          {
            "id": 41,
            "nodeType": "FunctionDefinition",
            "src": "1540:144:0",
            "nodes": [],
            "body": {
              "id": 40,
              "nodeType": "Block",
              "src": "1606:78:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 38,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 34,
                      "name": "leverageStrategy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 16,
                      "src": "1616:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                        "typeString": "contract LeverageStrategy"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 36,
                          "name": "_leverageStrategyAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 27,
                          "src": "1652:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 35,
                        "name": "LeverageStrategy",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2000,
                        "src": "1635:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LeverageStrategy_$2000_$",
                          "typeString": "type(contract LeverageStrategy)"
                        }
                      },
                      "id": 37,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1635:42:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                        "typeString": "contract LeverageStrategy"
                      }
                    },
                    "src": "1616:61:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                      "typeString": "contract LeverageStrategy"
                    }
                  },
                  "id": 39,
                  "nodeType": "ExpressionStatement",
                  "src": "1616:61:0"
                }
              ]
            },
            "documentation": {
              "id": 25,
              "nodeType": "StructuredDocumentation",
              "src": "1460:75:0",
              "text": "@param _leverageStrategyAddress Address of the target Strategy contract"
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 30,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "1594:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "1598:6:0",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "1594:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 32,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 29,
                  "name": "Ownable",
                  "nameLocations": [
                    "1586:7:0"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47902,
                  "src": "1586:7:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "1586:19:0"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 28,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27,
                  "mutability": "mutable",
                  "name": "_leverageStrategyAddress",
                  "nameLocation": "1560:24:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 41,
                  "src": "1552:32:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1552:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1551:34:0"
            },
            "returnParameters": {
              "id": 33,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1606:0:0"
            },
            "scope": 293,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 58,
            "nodeType": "FunctionDefinition",
            "src": "2909:176:0",
            "nodes": [],
            "body": {
              "id": 57,
              "nodeType": "Block",
              "src": "2962:123:0",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    48
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 48,
                      "mutability": "mutable",
                      "name": "currentHealth",
                      "nameLocation": "2979:13:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 57,
                      "src": "2972:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 47,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2972:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 52,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 49,
                        "name": "leverageStrategy",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16,
                        "src": "2995:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                          "typeString": "contract LeverageStrategy"
                        }
                      },
                      "id": 50,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3012:14:0",
                      "memberName": "strategyHealth",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 454,
                      "src": "2995:31:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_int256_$",
                        "typeString": "function () view external returns (int256)"
                      }
                    },
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2995:33:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2972:56:0"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    },
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 53,
                      "name": "currentHealth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48,
                      "src": "3046:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<=",
                    "rightExpression": {
                      "id": 54,
                      "name": "unwindThreshold",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18,
                      "src": "3063:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "src": "3046:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 46,
                  "id": 56,
                  "nodeType": "Return",
                  "src": "3039:39:0"
                }
              ]
            },
            "documentation": {
              "id": 42,
              "nodeType": "StructuredDocumentation",
              "src": "1690:171:0",
              "text": "@notice Check used by the Power Pool to determine when to rebalance the strategy\n @return Returns a `bool` indicating whether the PowerPool should unwind or not"
            },
            "functionSelector": "c7af71da",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkCondition",
            "nameLocation": "2918:14:0",
            "parameters": {
              "id": 43,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2932:2:0"
            },
            "returnParameters": {
              "id": 46,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 45,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58,
                  "src": "2956:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 44,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2956:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2955:6:0"
            },
            "scope": 293,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 187,
            "nodeType": "FunctionDefinition",
            "src": "3165:1345:0",
            "nodes": [],
            "body": {
              "id": 186,
              "nodeType": "Block",
              "src": "3258:1252:0",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    67,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 67,
                      "mutability": "mutable",
                      "name": "timeQueued",
                      "nameLocation": "3276:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 186,
                      "src": "3269:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 66,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3269:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 71,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 68,
                        "name": "leverageStrategy",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16,
                        "src": "3291:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                          "typeString": "contract LeverageStrategy"
                        }
                      },
                      "id": 69,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3308:12:0",
                      "memberName": "investQueued",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2102,
                      "src": "3291:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint64_$_t_uint192_$",
                        "typeString": "function () view external returns (uint64,uint192)"
                      }
                    },
                    "id": 70,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3291:31:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint64_$_t_uint192_$",
                      "typeString": "tuple(uint64,uint192)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3268:54:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 80,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "id": 74,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 72,
                        "name": "timeQueued",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 67,
                        "src": "3374:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 73,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3388:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "3374:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "id": 79,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 75,
                            "name": "leverageStrategy",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "3393:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                              "typeString": "contract LeverageStrategy"
                            }
                          },
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3410:14:0",
                          "memberName": "strategyHealth",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 454,
                          "src": "3393:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_int256_$",
                            "typeString": "function () view external returns (int256)"
                          }
                        },
                        "id": 77,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3393:33:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "id": 78,
                        "name": "reinvestThreshold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24,
                        "src": "3429:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "src": "3393:53:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3374:72:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "id": 103,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 101,
                        "name": "timeQueued",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 67,
                        "src": "3686:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3700:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "3686:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 124,
                    "nodeType": "IfStatement",
                    "src": "3682:196:0",
                    "trueBody": {
                      "id": 123,
                      "nodeType": "Block",
                      "src": "3703:175:0",
                      "statements": [
                        {
                          "expression": {
                            "id": 113,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 104,
                              "name": "cdata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 64,
                              "src": "3717:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 107,
                                      "name": "leverageStrategy",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 16,
                                      "src": "3748:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                                        "typeString": "contract LeverageStrategy"
                                      }
                                    },
                                    "id": 108,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "3765:23:0",
                                    "memberName": "executeInvestFromKeeper",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 949,
                                    "src": "3748:40:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                                      "typeString": "function (uint256,bool) external"
                                    }
                                  },
                                  "id": 109,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3789:8:0",
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "3748:49:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "hexValue": "31",
                                  "id": 110,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3799:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                {
                                  "hexValue": "66616c7365",
                                  "id": 111,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3802:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "false"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                ],
                                "expression": {
                                  "id": 105,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "3725:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 106,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "3729:18:0",
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "3725:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 112,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3725:83:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "src": "3717:91:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 114,
                          "nodeType": "ExpressionStatement",
                          "src": "3717:91:0"
                        },
                        {
                          "expression": {
                            "id": 117,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 115,
                              "name": "flag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62,
                              "src": "3822:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "hexValue": "74727565",
                              "id": 116,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3829:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            "src": "3822:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 118,
                          "nodeType": "ExpressionStatement",
                          "src": "3822:11:0"
                        },
                        {
                          "expression": {
                            "components": [
                              {
                                "id": 119,
                                "name": "flag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 62,
                                "src": "3855:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "id": 120,
                                "name": "cdata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 64,
                                "src": "3861:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "id": 121,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "3854:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "tuple(bool,bytes memory)"
                            }
                          },
                          "functionReturnParameters": 65,
                          "id": 122,
                          "nodeType": "Return",
                          "src": "3847:20:0"
                        }
                      ]
                    }
                  },
                  "id": 125,
                  "nodeType": "IfStatement",
                  "src": "3370:508:0",
                  "trueBody": {
                    "id": 100,
                    "nodeType": "Block",
                    "src": "3448:228:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 90,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 81,
                            "name": "cdata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 64,
                            "src": "3462:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 84,
                                    "name": "leverageStrategy",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 16,
                                    "src": "3493:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                                      "typeString": "contract LeverageStrategy"
                                    }
                                  },
                                  "id": 85,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3510:23:0",
                                  "memberName": "executeInvestFromKeeper",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 949,
                                  "src": "3493:40:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                                    "typeString": "function (uint256,bool) external"
                                  }
                                },
                                "id": 86,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3534:8:0",
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "3493:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              {
                                "hexValue": "31",
                                "id": 87,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3544:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              {
                                "hexValue": "74727565",
                                "id": 88,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3547:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                },
                                {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              ],
                              "expression": {
                                "id": 82,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "3470:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 83,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "3474:18:0",
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "3470:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 89,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3470:82:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "3462:90:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 91,
                        "nodeType": "ExpressionStatement",
                        "src": "3462:90:0"
                      },
                      {
                        "expression": {
                          "id": 94,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 92,
                            "name": "flag",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62,
                            "src": "3566:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 93,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3573:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "3566:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 95,
                        "nodeType": "ExpressionStatement",
                        "src": "3566:11:0"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "id": 96,
                              "name": "flag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62,
                              "src": "3599:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 97,
                              "name": "cdata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 64,
                              "src": "3605:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "id": 98,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "3598:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "functionReturnParameters": 65,
                        "id": 99,
                        "nodeType": "Return",
                        "src": "3591:20:0"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    },
                    "id": 130,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "id": 126,
                          "name": "leverageStrategy",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 16,
                          "src": "3975:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                            "typeString": "contract LeverageStrategy"
                          }
                        },
                        "id": 127,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3992:14:0",
                        "memberName": "strategyHealth",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 454,
                        "src": "3975:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$__$returns$_t_int256_$",
                          "typeString": "function () view external returns (int256)"
                        }
                      },
                      "id": 128,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3975:33:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 129,
                      "name": "reinvestThreshold",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24,
                      "src": "4011:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "src": "3975:53:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 153,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 149,
                                "name": "leverageStrategy",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 16,
                                "src": "4189:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                                  "typeString": "contract LeverageStrategy"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                                  "typeString": "contract LeverageStrategy"
                                }
                              ],
                              "id": 148,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4181:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 147,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4181:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 150,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4181:25:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 145,
                            "name": "wstETH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3673,
                            "src": "4164:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$48802",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 146,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4171:9:0",
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 48759,
                          "src": "4164:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4164:43:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "id": 152,
                        "name": "investThreshold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21,
                        "src": "4210:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4164:61:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "id": 179,
                      "nodeType": "Block",
                      "src": "4406:68:0",
                      "statements": [
                        {
                          "expression": {
                            "id": 173,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 168,
                              "name": "cdata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 64,
                              "src": "4420:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "hexValue": "",
                                  "id": 171,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4434:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                    "typeString": "literal_string \"\""
                                  },
                                  "value": ""
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                    "typeString": "literal_string \"\""
                                  }
                                ],
                                "id": 170,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4428:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                  "typeString": "type(bytes storage pointer)"
                                },
                                "typeName": {
                                  "id": 169,
                                  "name": "bytes",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4428:5:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 172,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4428:9:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "src": "4420:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 174,
                          "nodeType": "ExpressionStatement",
                          "src": "4420:17:0"
                        },
                        {
                          "expression": {
                            "id": 177,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 175,
                              "name": "flag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62,
                              "src": "4451:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "hexValue": "66616c7365",
                              "id": 176,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4458:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            "src": "4451:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 178,
                          "nodeType": "ExpressionStatement",
                          "src": "4451:12:0"
                        }
                      ]
                    },
                    "id": 180,
                    "nodeType": "IfStatement",
                    "src": "4160:314:0",
                    "trueBody": {
                      "id": 167,
                      "nodeType": "Block",
                      "src": "4227:173:0",
                      "statements": [
                        {
                          "expression": {
                            "id": 161,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 154,
                              "name": "cdata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 64,
                              "src": "4290:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 157,
                                      "name": "leverageStrategy",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 16,
                                      "src": "4321:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                                        "typeString": "contract LeverageStrategy"
                                      }
                                    },
                                    "id": 158,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4338:16:0",
                                    "memberName": "investFromKeeper",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 791,
                                    "src": "4321:33:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                                      "typeString": "function () external"
                                    }
                                  },
                                  "id": 159,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4355:8:0",
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "4321:42:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "expression": {
                                  "id": 155,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "4298:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 156,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "4302:18:0",
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "4298:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 160,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4298:66:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "src": "4290:74:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 162,
                          "nodeType": "ExpressionStatement",
                          "src": "4290:74:0"
                        },
                        {
                          "expression": {
                            "id": 165,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 163,
                              "name": "flag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 62,
                              "src": "4378:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "hexValue": "74727565",
                              "id": 164,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4385:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            "src": "4378:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 166,
                          "nodeType": "ExpressionStatement",
                          "src": "4378:11:0"
                        }
                      ]
                    }
                  },
                  "id": 181,
                  "nodeType": "IfStatement",
                  "src": "3971:503:0",
                  "trueBody": {
                    "id": 144,
                    "nodeType": "Block",
                    "src": "4030:124:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 138,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 131,
                            "name": "cdata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 64,
                            "src": "4044:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 134,
                                    "name": "leverageStrategy",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 16,
                                    "src": "4075:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                                      "typeString": "contract LeverageStrategy"
                                    }
                                  },
                                  "id": 135,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4092:16:0",
                                  "memberName": "investFromKeeper",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 791,
                                  "src": "4075:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                                    "typeString": "function () external"
                                  }
                                },
                                "id": 136,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4109:8:0",
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "4075:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "id": 132,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "4052:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "4056:18:0",
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "4052:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 137,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4052:66:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "4044:74:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 139,
                        "nodeType": "ExpressionStatement",
                        "src": "4044:74:0"
                      },
                      {
                        "expression": {
                          "id": 142,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 140,
                            "name": "flag",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62,
                            "src": "4132:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 141,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4139:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "4132:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 143,
                        "nodeType": "ExpressionStatement",
                        "src": "4132:11:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "id": 182,
                        "name": "flag",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 62,
                        "src": "4491:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "id": 183,
                        "name": "cdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 64,
                        "src": "4497:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "id": 184,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "4490:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "functionReturnParameters": 65,
                  "id": 185,
                  "nodeType": "Return",
                  "src": "4483:20:0"
                }
              ]
            },
            "documentation": {
              "id": 59,
              "nodeType": "StructuredDocumentation",
              "src": "3091:69:0",
              "text": "@notice Used by Keeper to check if there is any balance to invest"
            },
            "functionSelector": "92c4b61d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkBalanceAndReturnCalldata",
            "nameLocation": "3174:29:0",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3203:2:0"
            },
            "returnParameters": {
              "id": 65,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62,
                  "mutability": "mutable",
                  "name": "flag",
                  "nameLocation": "3232:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 187,
                  "src": "3227:9:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3227:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 64,
                  "mutability": "mutable",
                  "name": "cdata",
                  "nameLocation": "3251:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 187,
                  "src": "3238:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 63,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3238:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3226:31:0"
            },
            "scope": 293,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 253,
            "nodeType": "FunctionDefinition",
            "src": "4662:718:0",
            "nodes": [],
            "body": {
              "id": 252,
              "nodeType": "Block",
              "src": "4748:632:0",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    196,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 196,
                      "mutability": "mutable",
                      "name": "timeQueued",
                      "nameLocation": "4820:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 252,
                      "src": "4813:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 195,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "4813:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 200,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 197,
                        "name": "leverageStrategy",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16,
                        "src": "4835:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                          "typeString": "contract LeverageStrategy"
                        }
                      },
                      "id": 198,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4852:12:0",
                      "memberName": "unwindQueued",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2099,
                      "src": "4835:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint64_$_t_uint192_$",
                        "typeString": "function () view external returns (uint64,uint192)"
                      }
                    },
                    "id": 199,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4835:31:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint64_$_t_uint192_$",
                      "typeString": "tuple(uint64,uint192)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4812:54:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    },
                    "id": 203,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 201,
                      "name": "timeQueued",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 196,
                      "src": "4880:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 202,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4894:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "4880:15:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 218,
                  "nodeType": "IfStatement",
                  "src": "4876:161:0",
                  "trueBody": {
                    "id": 217,
                    "nodeType": "Block",
                    "src": "4897:140:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 211,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 204,
                            "name": "cdata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "4911:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 207,
                                    "name": "leverageStrategy",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 16,
                                    "src": "4942:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                                      "typeString": "contract LeverageStrategy"
                                    }
                                  },
                                  "id": 208,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4959:23:0",
                                  "memberName": "executeUnwindFromKeeper",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1100,
                                  "src": "4942:40:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                                    "typeString": "function () external"
                                  }
                                },
                                "id": 209,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4983:8:0",
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "4942:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "id": 205,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "4919:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 206,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "4923:18:0",
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "4919:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 210,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4919:73:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "4911:81:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 212,
                        "nodeType": "ExpressionStatement",
                        "src": "4911:81:0"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "74727565",
                              "id": 213,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5014:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            {
                              "id": 214,
                              "name": "cdata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 193,
                              "src": "5020:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "id": 215,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "5013:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "functionReturnParameters": 194,
                        "id": 216,
                        "nodeType": "Return",
                        "src": "5006:20:0"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 219,
                      "name": "checkCondition",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 58,
                      "src": "5120:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                        "typeString": "function () view returns (bool)"
                      }
                    },
                    "id": 220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5120:16:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 246,
                    "nodeType": "Block",
                    "src": "5276:68:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 240,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 235,
                            "name": "cdata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "5290:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "",
                                "id": 238,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5304:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                },
                                "value": ""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "id": 237,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5298:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 236,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "5298:5:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 239,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5298:9:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "5290:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 241,
                        "nodeType": "ExpressionStatement",
                        "src": "5290:17:0"
                      },
                      {
                        "expression": {
                          "id": 244,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 242,
                            "name": "flag",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 191,
                            "src": "5321:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 243,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5328:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "5321:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 245,
                        "nodeType": "ExpressionStatement",
                        "src": "5321:12:0"
                      }
                    ]
                  },
                  "id": 247,
                  "nodeType": "IfStatement",
                  "src": "5116:228:0",
                  "trueBody": {
                    "id": 234,
                    "nodeType": "Block",
                    "src": "5138:132:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 228,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 221,
                            "name": "cdata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "5152:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 224,
                                    "name": "leverageStrategy",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 16,
                                    "src": "5183:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_LeverageStrategy_$2000",
                                      "typeString": "contract LeverageStrategy"
                                    }
                                  },
                                  "id": 225,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5200:24:0",
                                  "memberName": "unwindPositionFromKeeper",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1009,
                                  "src": "5183:41:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                                    "typeString": "function () external"
                                  }
                                },
                                "id": 226,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5225:8:0",
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "5183:50:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              ],
                              "expression": {
                                "id": 222,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "5160:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 223,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "5164:18:0",
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "5160:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 227,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5160:74:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "src": "5152:82:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 229,
                        "nodeType": "ExpressionStatement",
                        "src": "5152:82:0"
                      },
                      {
                        "expression": {
                          "id": 232,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 230,
                            "name": "flag",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 191,
                            "src": "5248:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 231,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5255:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "5248:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 233,
                        "nodeType": "ExpressionStatement",
                        "src": "5248:11:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "id": 248,
                        "name": "flag",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 191,
                        "src": "5361:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "id": 249,
                        "name": "cdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 193,
                        "src": "5367:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "id": 250,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "5360:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "functionReturnParameters": 194,
                  "id": 251,
                  "nodeType": "Return",
                  "src": "5353:20:0"
                }
              ]
            },
            "documentation": {
              "id": 188,
              "nodeType": "StructuredDocumentation",
              "src": "4516:141:0",
              "text": "@notice This function returns the calldata for the Keeper to execute\n @dev    Only to be used by Keeper to obtain correct calldata"
            },
            "functionSelector": "f6e5807a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkAndReturnCalldata",
            "nameLocation": "4671:22:0",
            "parameters": {
              "id": 189,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4693:2:0"
            },
            "returnParameters": {
              "id": 194,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 191,
                  "mutability": "mutable",
                  "name": "flag",
                  "nameLocation": "4722:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 253,
                  "src": "4717:9:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 190,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4717:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 193,
                  "mutability": "mutable",
                  "name": "cdata",
                  "nameLocation": "4741:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 253,
                  "src": "4728:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 192,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4728:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4716:31:0"
            },
            "scope": 293,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 266,
            "nodeType": "FunctionDefinition",
            "src": "5649:104:0",
            "nodes": [],
            "body": {
              "id": 265,
              "nodeType": "Block",
              "src": "5712:41:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 261,
                      "name": "investThreshold",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21,
                      "src": "5722:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 262,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 256,
                      "src": "5740:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5722:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 264,
                  "nodeType": "ExpressionStatement",
                  "src": "5722:24:0"
                }
              ]
            },
            "documentation": {
              "id": 254,
              "nodeType": "StructuredDocumentation",
              "src": "5386:258:0",
              "text": "@notice Allows owner to set the amount of wstETH that should be in the contract before the keeper invests it\n @dev    Access controlled\n @param  amount Amount of wstETH that should accrue in Strategy before it will be invested automatically"
            },
            "functionSelector": "57beada2",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 259,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 258,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "5702:9:0"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47813,
                  "src": "5702:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "5702:9:0"
              }
            ],
            "name": "setInvestThreshold",
            "nameLocation": "5658:18:0",
            "parameters": {
              "id": 257,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 256,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "5685:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 266,
                  "src": "5677:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 255,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5677:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5676:16:0"
            },
            "returnParameters": {
              "id": 260,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5712:0:0"
            },
            "scope": 293,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 279,
            "nodeType": "FunctionDefinition",
            "src": "6062:115:0",
            "nodes": [],
            "body": {
              "id": 278,
              "nodeType": "Block",
              "src": "6130:47:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 276,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 274,
                      "name": "unwindThreshold",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18,
                      "src": "6140:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 275,
                      "name": "newThreshold",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 269,
                      "src": "6158:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "src": "6140:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "id": 277,
                  "nodeType": "ExpressionStatement",
                  "src": "6140:30:0"
                }
              ]
            },
            "documentation": {
              "id": 267,
              "nodeType": "StructuredDocumentation",
              "src": "5759:298:0",
              "text": "@notice Allows owner to set the acceptable `health` threshold before the keeper unwinds debt\n @dev    Access controlled\n @dev    Be careful! This can be negative.\n @param  newThreshold Amount of wstETH that should accrue in Strategy before it will be invested automatically"
            },
            "functionSelector": "1f4a012b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 272,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 271,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "6120:9:0"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47813,
                  "src": "6120:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "6120:9:0"
              }
            ],
            "name": "setUnwindThreshold",
            "nameLocation": "6071:18:0",
            "parameters": {
              "id": 270,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 269,
                  "mutability": "mutable",
                  "name": "newThreshold",
                  "nameLocation": "6097:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 279,
                  "src": "6090:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 268,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6090:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6089:21:0"
            },
            "returnParameters": {
              "id": 273,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6130:0:0"
            },
            "scope": 293,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 292,
            "nodeType": "FunctionDefinition",
            "src": "6528:117:0",
            "nodes": [],
            "body": {
              "id": 291,
              "nodeType": "Block",
              "src": "6598:47:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 289,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 287,
                      "name": "unwindThreshold",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18,
                      "src": "6608:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 288,
                      "name": "newThreshold",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 282,
                      "src": "6626:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      }
                    },
                    "src": "6608:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "id": 290,
                  "nodeType": "ExpressionStatement",
                  "src": "6608:30:0"
                }
              ]
            },
            "documentation": {
              "id": 280,
              "nodeType": "StructuredDocumentation",
              "src": "6184:339:0",
              "text": "@notice Allows owner to set the acceptable `health` threshold before the keeper increases the debt\n @dev    Access controlled\n @dev    Be careful! This can be negative, although is not recommended to be.\n @param  newThreshold Amount of wstETH that should accrue in Strategy before it will be invested automatically"
            },
            "functionSelector": "564acb96",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 285,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 284,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "6588:9:0"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47813,
                  "src": "6588:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "6588:9:0"
              }
            ],
            "name": "setReinvestThreshold",
            "nameLocation": "6537:20:0",
            "parameters": {
              "id": 283,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 282,
                  "mutability": "mutable",
                  "name": "newThreshold",
                  "nameLocation": "6565:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 292,
                  "src": "6558:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 281,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6558:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6557:21:0"
            },
            "returnParameters": {
              "id": 286,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6598:0:0"
            },
            "scope": 293,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 10,
              "name": "Ownable",
              "nameLocations": [
                "948:7:0"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 47902,
              "src": "948:7:0"
            },
            "id": 11,
            "nodeType": "InheritanceSpecifier",
            "src": "948:7:0"
          },
          {
            "baseName": {
              "id": 12,
              "name": "Constants",
              "nameLocations": [
                "957:9:0"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3741,
              "src": "957:9:0"
            },
            "id": 13,
            "nodeType": "InheritanceSpecifier",
            "src": "957:9:0"
          }
        ],
        "canonicalName": "StrategyResolver",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 9,
          "nodeType": "StructuredDocumentation",
          "src": "716:203:0",
          "text": "@title  StrategyResolver\n @notice Used by PowerPool to check and manage protocol health\n @dev    Allows the PowerPool to check and receive the appropriate calldata for automated function calls"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          293,
          3741,
          47902,
          50114
        ],
        "name": "StrategyResolver",
        "nameLocation": "928:16:0",
        "scope": 294,
        "usedErrors": [
          3704,
          3707,
          3710,
          3713,
          3716,
          3718,
          3721,
          3724,
          3727,
          3729,
          3731,
          3734,
          3737,
          3740,
          47768,
          47773
        ],
        "usedEvents": [
          47779
        ]
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 0
}
